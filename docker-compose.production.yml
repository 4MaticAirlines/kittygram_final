version: '3.8'

volumes:
  pg_data_production:
  static_volume:

services:
  backend:
    image: alexandermolodtsov/kittygram_backend
    env_file: .env
    volumes:
      - static_volume:/backend_static
    ports:
      - "8000:8000"
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - kittygram_net
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --no-input &&
             gunicorn --bind 0.0.0.0:8000 kittygram_backend.wsgi"

  db:
    image: postgres:13.10
    env_file: .env
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust  # Для упрощения деплоя
    volumes:
      - pg_data_production:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - kittygram_net

  frontend:
    image: alexandermolodtsov/kittygram_frontend
    env_file: .env
    volumes:
      - static_volume:/frontend_static
    networks:
      - kittygram_net
    command: >
      sh -c "cp -r /app/build/. /frontend_static/ && 
             tail -f /dev/null"  # Копирование статики + вечный процесс

  gateway:
    image: alexandermolodtsov/kittygram_gateway
    env_file: .env
    volumes:
      - static_volume:/staticfiles/
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - kittygram_net
    command: "nginx -g 'daemon off;'"  # Запуск nginx в foreground

networks:
  kittygram_net:
    driver: bridge