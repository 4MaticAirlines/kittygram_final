name: Kittygram CI/CD

on:
  push:
    branches: [ main ]

env:
  DOCKERHUB_USERNAME: alexandermolodtsov

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 isort
          pip install -r backend/requirements.txt

      - name: Lint backend
        run: |
          flake8 backend/
          isort --check-only backend/

      - name: Run Django tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        run: |
          cd backend && python manage.py test

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: |
          cd frontend && npm ci

      - name: Run frontend tests
        run: |
          cd frontend && npm test

  build-and-push:
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: backend
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/kittygram_backend:latest

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: frontend
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/kittygram_frontend:latest

      - name: Build and push gateway
        uses: docker/build-push-action@v4
        with:
          context: nginx
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/kittygram_gateway:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.production.yml,.env"
          target: "/home/${{ secrets.SSH_USERNAME }}/kittygram/"

      - name: Deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.SSH_USERNAME }}/kittygram
            docker-compose -f docker-compose.production.yml down
            docker-compose -f docker-compose.production.yml pull
            docker-compose -f docker-compose.production.yml up -d
            docker-compose exec backend python manage.py migrate
            docker-compose exec backend python manage.py collectstatic --no-input

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ✅ Деплой Kittygram завершен!
            • Backend: ${{ env.DOCKERHUB_USERNAME }}/kittygram_backend
            • Frontend: ${{ env.DOCKERHUB_USERNAME }}/kittygram_frontend